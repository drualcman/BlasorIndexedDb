<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DrUalcman-BlazorIndexedDb</name>
    </assembly>
    <members>
        <member name="T:BlazorIndexedDb.Attributes.FieldAttribute">
            <summary>
            Custom Attribute to setup the model
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Attributes.FieldAttribute.IsKeyPath">
            <summary>
            If the proerty is a keypath or requered
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Attributes.FieldAttribute.IsAutoIncremental">
            <summary>
            If the property is auto incremental
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Attributes.FieldAttribute.IsUnique">
            <summary>
            If the property are unique
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Attributes.FieldAttribute.IsIgnore">
            <summary>
            If the property must be ignored when parse into a indexedDb
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Attributes.FieldAttribute.#ctor">
            <summary>
            Contructor to setup default values
            </summary>
        </member>
        <member name="T:BlazorIndexedDb.Attributes.RelationAttribute">
            <summary>
            Relationship between tables
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Attributes.RelationAttribute.StoreIndexName">
            <summary>
            Property name from the Model will create a relationship. Default value Id
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Attributes.RelationAttribute.FieldName">
            <summary>
            Not nullable. Field name default value RelationId must be use in indexDb Store table to save the StoreIndexName value.
            This property no need to be created into the model to have a relationship.
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Attributes.RelationAttribute.#ctor">
            <summary>
            Setup default values
            </summary>
        </member>
        <member name="T:BlazorIndexedDb.Commands.DbCommands">
            <summary>
            Database Commands to use
            </summary>
        </member>
        <member name="F:BlazorIndexedDb.Commands.DbCommands.Insert">
            <summary>
            Insert array data
            </summary>
        </member>
        <member name="F:BlazorIndexedDb.Commands.DbCommands.Update">
            <summary>
            Update array data
            </summary>
        </member>
        <member name="F:BlazorIndexedDb.Commands.DbCommands.Delete">
            <summary>
            Delete single row from id send
            </summary>
        </member>
        <member name="T:BlazorIndexedDb.Commands.Commands">
            <summary>
            Other commands to execute
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Commands.Commands.#ctor(Microsoft.JSInterop.IJSObjectReference,BlazorIndexedDb.Configuration.Settings)">
            <summary>
            Constructor
            </summary>
            <param name="js"></param>
            <param name="setup"></param>
        </member>
        <member name="M:BlazorIndexedDb.Commands.Commands.DbCommand(BlazorIndexedDb.Commands.DbCommands,System.String,System.String)">
            <summary>
            Execute a command directly sending a json string
            </summary>
            <param name="command"></param>
            <param name="storeName"></param>
            <param name="data"></param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.Commands.DbConnected">
            <summary>
            Get is we are connected to a indexed db
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Commands.DeleteActions">
            <summary>
            Delete commands
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Commands.DeleteActions.#ctor(Microsoft.JSInterop.IJSObjectReference,BlazorIndexedDb.Configuration.Settings)">
            <summary>
            Constructor
            </summary>
            <param name="js"></param>
            <param name="setup"></param>
        </member>
        <member name="M:BlazorIndexedDb.Commands.DeleteActions.DbDelete``1(System.Int32)">
            <summary>
            Delete one row from a table
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id"></param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.DeleteActions.DbDelete``1(System.Double)">
            <summary>
            Delete one row from a table
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">id from the row to delete</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.DeleteActions.DbDelete``1(System.Decimal)">
            <summary>
            Delete one row from a table
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">id from the row to delete</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.DeleteActions.DbDelete``1(System.String)">
            <summary>
            Delete one row from a table
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">id from the row to delete</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.DeleteActions.DbDelete``1(System.DateTime)">
            <summary>
            Delete one row from a table
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">id from the row to delete</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Commands.InsertActions">
            <summary>
            Insert commands
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Commands.InsertActions.#ctor(Microsoft.JSInterop.IJSObjectReference,BlazorIndexedDb.Configuration.Settings)">
            <summary>
            Constructor
            </summary>
            <param name="js"></param>
            <param name="setup"></param>
        </member>
        <member name="M:BlazorIndexedDb.Commands.InsertActions.DbInsert``1(``0)">
            <summary>
            Insert into a table to a db
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="data"></param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.InsertActions.DbInsert``1(System.Collections.Generic.List{``0})">
            <summary>
            Insert into a table to a db
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="rows">data to insert</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.InsertActions.DbInserOffline``1(``0)">
            <summary>
            Insert into a table to a db
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="data">data to insert</param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.InsertActions.DbInserOffline``1(System.Collections.Generic.List{``0})">
            <summary>
            Insert int a table to a db with off-line property
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="rows">data to insert</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Commands.SelectActions">
            <summary>
            Select commands
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Commands.SelectActions.#ctor(Microsoft.JSInterop.IJSObjectReference,BlazorIndexedDb.Configuration.Settings)">
            <summary>
            Constructor
            </summary>
            <param name="js"></param>
            <param name="setup"></param>
        </member>
        <member name="M:BlazorIndexedDb.Commands.SelectActions.DbSelect``1">
            <summary>
            Get all resister from a table
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.SelectActions.DbSelect``1(System.String,System.Object)">
            <summary>
            Get all resister from a table
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="column">column to compare</param>
            <param name="value">value to compare</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.SelectActions.SingleRecord``1(System.Object)">
            <summary>
            Get a single record from store model
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">column to compare</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.SelectActions.SingleRecord``1(System.Int32)">
            <summary>
            Get a single record from store model
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">column to compare</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.SelectActions.SingleRecord``1(System.Double)">
            <summary>
            Get a single record from store model
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">column to compare</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.SelectActions.SingleRecord``1(System.Decimal)">
            <summary>
            Get a single record from store model
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">column to compare</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.SelectActions.SingleRecord``1(System.Int64)">
            <summary>
            Get a single record from store model
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">column to compare</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.SelectActions.SingleRecord``1(System.String)">
            <summary>
            Get a single record from store model
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">column to compare</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.SelectActions.SingleRecord``1(System.DateTime)">
            <summary>
            Get a single record from store model
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="id">column to compare</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Commands.TableActions">
            <summary>
            Manage tables
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Commands.TableActions.#ctor(Microsoft.JSInterop.IJSObjectReference,BlazorIndexedDb.Configuration.Settings)">
            <summary>
            Constructor
            </summary>
            <param name="js"></param>
            <param name="setup"></param>
        </member>
        <member name="M:BlazorIndexedDb.Commands.TableActions.DbCleanTable``1">
            <summary>
            Delete all rows from a table
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.TableActions.DbCleanTable(System.String)">
            <summary>
            Delete all rows from a table
            </summary>
            <param name="name"></param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Commands.UpdateActions">
            <summary>
            Update commands
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Commands.UpdateActions.#ctor(Microsoft.JSInterop.IJSObjectReference,BlazorIndexedDb.Configuration.Settings)">
            <summary>
            Constructor
            </summary>
            <param name="js"></param>
            <param name="setup"></param>
        </member>
        <member name="M:BlazorIndexedDb.Commands.UpdateActions.DbUpdate``1(``0)">
            <summary>
            Update table to a db
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="data">data to insert</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.UpdateActions.DbUpdate``1(System.Collections.Generic.List{``0})">
            <summary>
            Update table to a db
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="rows">data to insert</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.UpdateActions.DbUpdateOffLine``1(``0)">
            <summary>
            Update table to a db
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="data">data to insert</param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Commands.UpdateActions.DbUpdateOffLine``1(System.Collections.Generic.List{``0})">
            <summary>
            Update table to a db with offline property
            </summary>
            <typeparam name="TModel">Table or store to use</typeparam>
            <param name="rows">data to insert</param>
            <exception cref="T:BlazorIndexedDb.Models.ResponseException"></exception>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Configuration.Initalizing`1">
            <summary>
            Setup connection with the indexedDb in the browser
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Configuration.Initalizing`1.DbInit">
            <summary>
            Setup a indexedDb in a browser
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Configuration.Initalizing`1.DbInit(System.String,System.Int32)">
            <summary>
            Setup a indexedDb in a browser
            </summary>
            <param name="name">database name</param>
            <param name="version">database version</param>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Configuration.Settings">
            <summary>
            Configuration class to setup a IndexedDb in a browser
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Configuration.Settings.ModelsAsJson">
            <summary>
            Save a copy of how is the tables definition in JSON to send to the Javasctipt to compare the models
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Configuration.Settings.DBName">
            <summary>
            Database name
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Configuration.Settings.Version">
            <summary>
            Version of the database
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Configuration.Settings.AssemblyName">
            <summary>
            Assembly name to search the entities
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Configuration.Settings.EntitiesNamespace">
            <summary>
            Namespace where is located the entities if it's different from the assembly name
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Configuration.Settings.#ctor">
            <summary>
            Default constructor get the AppDomain.CurrentDomain.FriendlyName like a DB name
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Configuration.Settings.#ctor(System.String,System.Int32)">
            <summary>
            Constructor with parameters
            </summary>
            <param name="DbName"></param>
            <param name="version"></param>
        </member>
        <member name="P:BlazorIndexedDb.Configuration.Settings.EnableDebug">
            <summary>
            Enable show console log info
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Configuration.Settings.Tables">
            <summary>
            Names about the models to use
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Configuration.Settings.Initialized">
            <summary>
            Know if the instance of a indexDb it's already initialized
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Configuration.Settings.Initiallezed">
            <summary>
            Know if the instance of a indexDb it's already initialized
            </summary>
        </member>
        <member name="T:BlazorIndexedDb.Helpers.AddOflineProperty">
            <summary>
            Add offline property to the entities to control when the transaction can't be saved into a live db
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.AddOflineProperty.AddOffline``1(``0)">
            <summary>
            Add offline property
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="toCopy"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.AddOflineProperty.AddOffline``1(System.Collections.Generic.List{``0})">
            <summary>
            Add offline property
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="toCopy"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.AddOflineProperty.AddOfflineAsync``1(System.Collections.Generic.List{``0})">
            <summary>
            Add offline property
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="toCopy"></param>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Helpers.ObjectConverter">
            <summary>
            Tools to work with objects
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.ObjectConverter.ToJson(System.Collections.IList)">
            <summary>
            Convert into a Json string the model send
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.ObjectConverter.ToJson(System.Collections.Generic.List{System.Object})">
            <summary>
            Convert into a Json string the model send
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.ObjectConverter.ToJson``1(System.Collections.Generic.List{``0})">
            <summary>
            Convert into a Json string the model send
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.ObjectConverter.ToJson``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert into a Json string the model send
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.ObjectConverter.ToJson``1(``0)">
            <summary>
            Convert into a Json string the object send
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.ObjectConverter.ToJsonAsync``1(System.Collections.Generic.List{``0})">
            <summary>
            Convert into a Json string the model send
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.ObjectConverter.ToJsonAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert into a Json string the model send
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.ObjectConverter.ToJsonAsync(System.Object)">
            <summary>
            Convert into a Json string the model send
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Helpers.PropertyOptions">
            <summary>
            Get the options from the attributes setup into the model
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.PropertyOptions.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Get all the indexdb attributes from the porperty
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:BlazorIndexedDb.Helpers.Utils">
            <summary>
            Internal utilities
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Helpers.Utils.GetGenericTypeName(System.Type)">
            <summary>
            Get only the name from the type passed if it's from a generic type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Models.CommandResponse">
            <summary>
            Return a result from the transaction
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Models.CommandResponse.#ctor(System.Boolean,System.String,System.Collections.Generic.List{BlazorIndexedDb.Models.ResponseJsDb})">
            <summary>
            Return a result from the transaction
            </summary>
        </member>
        <member name="T:BlazorIndexedDb.Models.ResponseException">
            <summary>
            Manage own exceptions
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Models.ResponseException.Command">
            <summary>
            Command throw the exception
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Models.ResponseException.StoreName">
            <summary>
            Store name throw the exception
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Models.ResponseException.TransactionData">
            <summary>
            Data inside the transaction if have
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Models.ResponseException.#ctor">
            <summary>
            Basic constructor
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Models.ResponseException.#ctor(System.String)">
            <summary>
            Constructor with message
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Models.ResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Contructur with message and exception
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Models.ResponseException.#ctor(System.String,System.String,System.String)">
            <summary>
            Basic internal constructor
            </summary>
            <param name="command"></param>
            <param name="storeName"></param>
            <param name="data"></param>
        </member>
        <member name="M:BlazorIndexedDb.Models.ResponseException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructor with the inner Exception
            </summary>
            <param name="command"></param>
            <param name="storeName"></param>
            <param name="data"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:BlazorIndexedDb.Models.ResponseException.ToString">
            <summary>
            Return error formated
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Models.ResponseJsDb">
            <summary>
            Response object for the commands
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Models.ResponseJsDb.Result">
            <summary>
            Transaction result
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Models.ResponseJsDb.Message">
            <summary>
            Transaction message
            </summary>
        </member>
        <member name="T:BlazorIndexedDb.Store.StoreContext`1">
            <summary>
                A StoreContext instance represents a instance of a indexedDb into the browser
                with the stores and can be used to query and save instances of your entities.
            </summary>
        </member>
        <member name="F:BlazorIndexedDb.Store.StoreContext`1.JsReference">
            <summary>
            Manage the javascript file
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreContext`1.#ctor(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Constructor to get the connection
            </summary>
            <param name="js"></param>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreContext`1.#ctor(Microsoft.JSInterop.IJSRuntime,BlazorIndexedDb.Configuration.Settings)">
            <summary>
            Constructor to get the connection
            </summary>
            <param name="js"></param>
            <param name="settings"></param>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreContext`1.Init(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Initialize the connection with a indexedDb
            </summary>
            <param name="js"></param>
        </member>
        <member name="T:BlazorIndexedDb.Store.StoreNames">
            <summary>
            Encapsulate manage tables and model for the database
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreNames.#ctor">
            <summary>
            Create a instance and initialized private tabes list with TableWithModel class
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreNames.AddTable(BlazorIndexedDb.Store.StoreSetDefinition)">
            <summary>
            Add new table with object definition
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreNames.AddTable(System.String,System.String)">
            <summary>
            Add new table with model
            </summary>
            <param name="name"></param>
            <param name="model"></param>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreNames.InTables(System.String)">
            <summary>
            Serach if the table already exists
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreNames.InTables``1">
            <summary>
            Serach if the model already exists in some table
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreNames.GetTable(System.String)">
            <summary>
            Get table name from the model
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreNames.GetTable``1">
            <summary>
            Get table name from the model
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreNames.GetModel(System.String)">
            <summary>
            Get table name from the model
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Store.StoreSet`1">
            <summary>
            Class represent
            </summary>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.#ctor(Microsoft.JSInterop.IJSObjectReference,BlazorIndexedDb.Configuration.Settings)">
            <summary>
            Constructor to get the connection
            </summary>
            <param name="js"></param>
            <param name="setup"></param>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.SelectAsync">
            <summary>
            Get a list with the content about the store model
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.SelectAsync(System.Object)">
            <summary>
            Get a single record from store model
            </summary>
            <param name="id">primary key id to search</param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.SelectAsync(System.Int32)">
            <summary>
            Get a single record from store model
            </summary>
            <param name="id">primary key id to search</param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.SelectAsync(System.Double)">
            <summary>
            Get a single record from store model
            </summary>
            <param name="id">primary key id to search</param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.SelectAsync(System.Decimal)">
            <summary>
            Get a single record from store model
            </summary>
            <param name="id">primary key id to search</param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.SelectAsync(System.Int64)">
            <summary>
            Get a single record from store model
            </summary>
            <param name="id">primary key id to search</param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.SelectAsync(System.String)">
            <summary>
            Get a single record from store model
            </summary>
            <param name="id">primary key id to search</param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.SelectAsync(System.DateTime)">
            <summary>
            Get a single record from store model
            </summary>
            <param name="id">primary key id to search</param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.AddAsync(`0,System.Boolean)">
            <summary>
            Add record in a table store
            </summary>
            <param name="toAdd"></param>
            <param name="isOffline"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.AddAsync(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Add record in a table store
            </summary>
            <param name="toAdd"></param>
            <param name="isOffline"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.UpdateAsync(`0,System.Boolean)">
            <summary>
            Update record in a table store
            </summary>
            <param name="toUpdate"></param>
            <param name="isOffline"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.UpdateAsync(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Update record in a table store
            </summary>
            <param name="toUpdate"></param>
            <param name="isOffline"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.CleanAsync">
            <summary>
            Delete all rows from a table
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.DeleteAsync(System.Int32)">
            <summary>
            Delete record from a table store
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.DeleteAsync(System.Double)">
            <summary>
            Delete record from a table store
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.DeleteAsync(System.Decimal)">
            <summary>
            Delete record from a table store
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.DeleteAsync(System.String)">
            <summary>
            Delete record from a table store
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorIndexedDb.Store.StoreSet`1.DeleteAsync(System.DateTime)">
            <summary>
            Delete record from a table store
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BlazorIndexedDb.Store.StoreSetDefinition">
            <summary>
            Define Tables and model name
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Store.StoreSetDefinition.Name">
            <summary>
            StoreSet Name
            </summary>
        </member>
        <member name="P:BlazorIndexedDb.Store.StoreSetDefinition.Model">
            <summary>
            StoreSet Model name
            </summary>
        </member>
    </members>
</doc>
